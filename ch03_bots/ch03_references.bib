# Citations for: ch03_bots/02_bot_examples.md
@misc{HeadlinerClipCaption2020,
	title = {Headliner {Clip} {Caption} ({@HeadlinerClip})},
	url = {https://twitter.com/HeadlinerClip},
	language = {en},
	urldate = {2023-12-02},
	journal = {X (formerly Twitter)},
	author = {{Headliner Clip Caption [@blockpartyapp_]}},
	month = dec,
	year = {2023},
}

@misc{COVID19VaccineProgress2023,
	title = {{COVID}-19 {Vaccine} {Progress} ({@vax\_progress)}},
	url = {https://twitter.com/vax_progress},
	language = {en},
	urldate = {2023-12-02},
	journal = {X (formerly Twitter)},
	author = {{COVID-19 Vaccine Progress [@HeadlinerClip]}},
	month = dec,
	year = {2023},
}

@misc{BlockPartyBlockpartyapp_2023,
	title = {Block {Party} ({@blockpartyapp\_})},
	url = {https://twitter.com/blockpartyapp_},
	language = {en},
	urldate = {2023-12-02},
	journal = {X (formerly Twitter)},
	author = {{Block Party [@blockpartyapp_]}},
	month = dec,
	year = {2023},
}

@misc{TweetDeleteEasilyDelete,
	title = {{TweetDelete} - {Easily} delete your old tweets},
	url = {https://tweetdelete.net/},
	urldate = {2023-12-02},
	organization = {TweetDelete},
}

@misc{RedPandaEvery2023,
	title = {Red {Panda} {Every} {Hour}! ({@RedPandaEveryHr})},
	url = {https://twitter.com/RedPandaEveryHr},
	language = {en},
	urldate = {2023-12-02},
	journal = {X (formerly Twitter)},
	author = {{Red Panda Every Hour! [@RedPandaEveryHr]}},
	month = dec,
	year = {2023},
}

@misc{BuyTikTokFollowers,
	title = {Buy {TikTok} {Followers}},
	copyright = {SocialWick},
	url = {https://www.socialwick.com},
	abstract = {SocialWick offers the best TikTok Followers in the market. If you are looking to boost your organic growth, buy real TikTok Followers from SocialWick. Our high-quality TikTok Followers are delivered fast and naturally. Check our deals below! SocialWick charges $0.14 per 10 Followers - the most affordable option on the market.},
	language = {en},
	urldate = {2023-12-02},
	organization = {SocialWick},
	year = {2023},
}

@misc{Astroturfing2023,
	title = {Astroturfing},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Astroturfing&oldid=1186679500},
	abstract = {Astroturfing is the practice of hiding the sponsors of a message or organization (e.g., political, advertising, religious, or public relations) to make it appear as though it originates from, and is supported by, grassroots participants. It is a practice intended to give the statements or organizations credibility by withholding information about the source's financial backers. The term astroturfing is derived from AstroTurf, a brand of synthetic carpeting designed to resemble natural grass, as a play on the word "grassroots". The implication behind the use of the term is that instead of a "true" or "natural" grassroots effort behind the activity in question, there is a "fake" or "artificial" appearance of support.},
	language = {en},
	urldate = {2023-12-02},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1186679500},
}

@misc{DirectorJediSneak,
	title = {{The} {Director} and the {Jedi} - {Sneak} {Preview}},
	url = {https://www.imdb.com/video/vi3962091545/},
	language = {en-US},
	urldate = {2023-12-02},
	abstract = {Sneak Preview: An intimate documentary delving into Rian Johnson's process as he comes in as a director new to the Star Wars universe.},
	publisher = {Lucasfilm},
	author = {Wonke, Anthony},
	collaborator = {Cox, Tylie and Johnson, Rian and Bergman, Ram and Yedlin, Steve},
	month = mar,
	year = {2018},
}

@misc{sharfStarWarsLast2018,
	title = {‘{Star} {Wars}: {The} {Last} {Jedi}’ {Backlash}: {Academic} {Study} {Reveals} 50\% of {Online} {Hate} {Caused} by {Russian} {Trolls} or {Non}-{Humans}},
	shorttitle = {‘{Star} {Wars}},
	url = {https://www.indiewire.com/features/general/star-wars-last-jedi-backlash-study-russian-trolls-rian-johnson-1202008645/},
	abstract = {Ac academic study published by researcher Morten Bay investigates the real sources behind the hatred over “The Last Jedi.”},
	language = {en-US},
	urldate = {2023-12-02},
	journal = {IndieWire},
	author = {Sharf, Zack},
	month = oct,
	year = {2018},
}

@misc{GenderPayGap2023,
	title = {Gender {Pay} {Gap} {Bot} ({@PayGapApp})},
	url = {https://twitter.com/PayGapApp},
	language = {en},
	urldate = {2023-12-02},
	journal = {X (formerly Twitter)},
	author = {{Gender Pay Gap Bot [@PayGapApp]}},
	month = mar,
	year = {2023},
}

@misc{genderpaygapbot[@paygapapp]ThisOrganisationWomen2023,
	type = {Tweet},
	title = {In this organisation, women's median hourly pay is 31.3\% lower than men's. {The} pay gap is 8.1 percentage points wider than the previous year.},
	url = {https://twitter.com/PayGapApp/status/1633538112373784581},
	language = {en},
	urldate = {2023-12-02},
	journal = {Twitter},
	author = {{Gender Pay Gap Bot [@PayGapApp]}},
	month = mar,
	year = {2023},
}

@article{jeongHowMakeBot2016a,
	title = {How to {Make} a {Bot} {That} {Isn}'t {Racist}},
	url = {https://www.vice.com/en/article/mg7g3y/how-to-make-a-not-racist-bot},
	abstract = {What Microsoft could have learned from veteran botmakers on Twitter.},
	language = {en},
	urldate = {2023-12-02},
	journal = {Vice},
	author = {Jeong, Sarah},
	month = mar,
	year = {2016},
	keywords = {Artificial Intelligence, Bots, Darius Kazemi, Ethics, Motherboard, Motherboard Show, Reports, Rob Dubbin, Tay, TayandYou, Tech},
}

@misc{API2023,
	title = {{API}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=API&oldid=1187436026},
	abstract = {An application programming interface (API) is a way for two or more computer programs to communicate with each other. It is a type of software interface, offering a service to other pieces of software. A document or standard that describes how to build or use such a connection or interface is called an API specification. A computer system that meets this standard is said to implement or expose an API. The term API may refer either to the specification or to the implementation. Whereas a system's user interface dictates how its end-users interact with the system in question, its API dictates how to write code that takes advantage of that system's capabilities.
	In contrast to a user interface, which connects a computer to a person, an application programming interface connects computers or pieces of software to each other. It is not intended to be used directly by a person (the end user) other than a computer programmer who is incorporating it into the software. An API is often made up of different parts which act as tools or services that are available to the programmer. A program or a programmer that uses one of these parts is said to call that portion of the API. The calls that make up the API are also known as subroutines, methods, requests, or endpoints. An API specification defines these calls, meaning that it explains how to use or implement them.
	One purpose of APIs is to hide the internal details of how a system works, exposing only those parts that a programmer will find useful, and keeping them consistent even if the internal details change later. An API may be custom-built for a particular pair of systems, or it may be a shared standard allowing interoperability among many systems.
	There are APIs for programming languages, software libraries, computer operating systems, and computer hardware. APIs originated in the 1940s, though the term did not emerge until the 1960s and 1970s. Contemporary usage of the term API often refers to web APIs, which allow communication between computers that are joined by the internet. Recent developments in APIs have led to the rise in popularity of microservices, which are loosely coupled services accessed through public APIs.},
	language = {en},
	urldate = {2023-12-02},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1187436026},
}

@misc{CaseyFiesler,
	title = {Casey {Fiesler}},
	url = {https://caseyfiesler.com/},
	abstract = {Casey Fiesler is an associate professor in the Department of Information Science (and Computer Science, by courtesy) at the University of Colorado Boulder.  Armed with a PhD in Human-Centered Computing from Georgia Tech and a JD from Vanderbilt Law School, she primarily researches technology ethics and law, human-computer-interaction, and online communities (occasionally all at the same time).},
	language = {en},
	urldate = {2023-12-02},
	author = {Fiesler, Casey},
	year = {2023},
}


# Citations for: ch03_bots/03_anatomy_of_a_bot/01_control_flow_options.md
@misc{Pseudocode2023,
	title = {Pseudocode},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Pseudocode&oldid=1185265918},
	abstract = {In computer science, pseudocode is a description of the steps in an algorithm using a mix of conventions of programming languages (like assignment operator, conditional operator, loop) with informal, usually self-explanatory, notation of actions and conditions. Although pseudocode shares features with regular programming languages, it is intended for human reading rather than machine control. Pseudocode typically omits details that are essential for machine implementation of the algorithm. The programming language is augmented with natural language description details, where convenient, or with compact mathematical notation. The purpose of using pseudocode is that it is easier for people to understand than conventional programming language code, and that it is an efficient and environment-independent description of the key principles of an algorithm. It is commonly used in textbooks and scientific publications to document algorithms and in planning of software and other algorithms.
	No broad standard for pseudocode syntax exists, as a program in pseudocode is not an executable program; however, certain limited standards exist (such as for academic assessment). Pseudocode resembles skeleton programs, which can be compiled without errors. Flowcharts, drakon-charts and Unified Modelling Language (UML) charts can be thought of as a graphical alternative to pseudocode, but need more space on paper. Languages such as HAGGIS bridge the gap between pseudocode and code written in programming languages.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1185265918},
}

@misc{ImperativeProgramming2023,
	title = {Imperative programming},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Imperative_programming&oldid=1184758238},
	abstract = {In computer science, imperative programming is a  programming paradigm of software that uses statements that change a program's state. In much the same way that the imperative mood in natural languages expresses commands, an imperative program consists of commands for the computer to perform. Imperative programming focuses on describing how a program operates step by step, rather than on high-level descriptions of its expected results.
	The term is often used in contrast to declarative programming, which focuses on what the program should accomplish without specifying all the details of how the program should achieve the result.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1184758238},
}

@misc{FunctionalProgramming2023,
	title = {Functional programming},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Functional_programming&oldid=1185556329},
	abstract = {In computer science, functional programming is a programming paradigm where programs are constructed by applying and composing functions. It is a declarative programming paradigm in which function definitions are trees of expressions that map values to other values, rather than a sequence of imperative statements which update the running state of the program.
	In functional programming, functions are treated as first-class citizens, meaning that they can be bound to names (including local identifiers), passed as arguments, and returned from other functions, just as any other data type can. This allows programs to be written in a declarative and composable style, where small functions are combined in a modular manner.
	Functional programming is sometimes treated as synonymous with purely functional programming, a subset of functional programming which treats all functions as deterministic mathematical functions, or pure functions. When a pure function is called with some given arguments, it will always return the same result, and cannot be affected by any mutable state or other side effects. This is in contrast with impure procedures, common in imperative programming, which can have side effects (such as modifying the program's state or taking input from a user). Proponents of purely functional programming claim that by restricting side effects, programs can have fewer bugs, be easier to debug and test, and be more suited to formal verification.Functional programming has its roots in academia, evolving from the lambda calculus, a formal system of computation based only on functions. Functional programming has historically been less popular than imperative programming, but many functional languages are seeing use today in industry and education, including Common Lisp, Scheme, Clojure, Wolfram Language, Racket, Erlang, Elixir, OCaml, Haskell, and F\#. Functional programming is also key to some languages that have found success in specific domains, like JavaScript in the Web, R in statistics, J, K and Q in financial analysis, and XQuery/XSLT for XML. Domain-specific declarative languages like SQL and Lex/Yacc use some elements of functional programming, such as not allowing mutable values. In addition, many other programming languages support programming in a functional style or have implemented features from functional programming, such as C++11, C\#, Kotlin, Perl, PHP, Python, Go, Rust, Raku, Scala, and Java (since Java 8).},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1185556329},
}

@misc{hagenEnrichingExcelHigherorder2021,
	title = {Enriching {Excel} with higher-order functional programming},
	url = {https://www.microsoft.com/en-us/research/blog/lambda-the-ultimatae-excel-worksheet-function/},
	abstract = {Microsoft Excel the programming language is evolving. With the recent release of LAMBDA, users can now define new functions in the program’s formula language. Learn about the capability and its role in the transformation of spreadsheet formulas.},
	language = {en-US},
	urldate = {2023-11-17},
	journal = {Microsoft Research},
	author = {Hagen, Alexis},
	month = jan,
	year = {2021},
}

@misc{GoogleSheetsOnline,
	title = {Google {Sheets}: {Online} {Spreadsheet} {Editor}},
	shorttitle = {Google {Sheets}},
	url = {https://www.google.com/sheets/about/},
	abstract = {Use Google Sheets to create and edit online spreadsheets. Get insights together with secure sharing in real-time and from any device.},
	language = {en},
	urldate = {2023-11-17},
	organization = {Google LLC}
}

@misc{VisualProgrammingLanguage2023,
	title = {Visual programming language},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Visual_programming_language&oldid=1183153745},
	abstract = {In computing, a visual programming language (visual programming system, VPL, or, VPS) or block coding is a programming language that lets users create programs by manipulating program elements graphically rather than by specifying them textually. A VPL allows programming with visual expressions, spatial arrangements of text and graphic symbols, used either as elements of syntax or secondary notation. For example, many VPLs (known as diagrammatic programming) are based on the idea of "boxes and arrows", where boxes or other screen objects are treated as entities, connected by arrows, lines or arcs which represent relations.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1183153745},
}

@misc{ScratchImagineProgram,
	title = {Scratch - {Imagine}, {Program}, {Share}},
	url = {https://scratch.mit.edu/},
	abstract = {Scratch is a free programming language and online community where you can create your own interactive stories, games, and animations.},
	language = {en-US},
	urldate = {2023-11-17},
	organization = {Scratch Foundation},
}

@misc{IntroductionBlenderManual,
	title = {Introduction — {Blender} {Manual}},
	abstract = {This is the manual for the 3D animation software from Blender.org},
	copyright = {CC-BY-SA 4.0 Int. License},
	url = {https://docs.blender.org/manual/en/2.79/editors/node_editor/introduction.html},
	urldate = {2023-11-17},
	collaborators = {Blender Foundation and community},
}

@misc{DeclarativeProgramming2023,
	title = {Declarative programming},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Declarative_programming&oldid=1184514070},
	abstract = {In computer science, declarative programming is a programming paradigm—a style of building the structure and elements of computer programs—that expresses the logic of a computation without describing its control flow.Many languages that apply this style attempt to minimize or eliminate side effects by describing what the program must accomplish in terms of the problem domain, rather than describing how to accomplish it as a sequence of the programming language primitives (the how being left up to the language's implementation). This is in contrast with imperative programming, which implements algorithms in explicit steps.Declarative programming often considers programs as theories of a formal logic, and computations as deductions in that logic space. Declarative programming may greatly simplify writing parallel programs.Common declarative languages include those of database query languages (e.g., SQL, XQuery), regular expressions, logic programming (e.g. Prolog, Datalog, answer set programming), functional programming, and configuration management systems.
	The term is often used in contrast to imperative programming, which dictates the transformation steps of its state explicitly.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1184514070},
}

@misc{ObjectorientedProgramming2023,
	title = {Object-oriented programming},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Object-oriented_programming&oldid=1185356437},
	abstract = {Object-oriented programming (OOP) is a programming paradigm based on the concept of objects, which can contain data and code: data in the form of fields (often known as attributes or properties), and code in the form of procedures (often known as methods). 
	A common feature of objects is that methods are attached to them and can access and modify the object's data fields. In this brand of OOP, there is usually a special name such as this or self used to refer to the current object. In OOP, computer programs are designed by making them out of objects that interact with one another. OOP languages are diverse, but the most popular ones are class-based, meaning that objects are instances of classes, which also determine their types.
	Many of the most widely used programming languages (such as C++, Java, Python, etc.) are multi-paradigm and they support object-oriented programming to a greater or lesser degree, typically in combination with imperative, procedural programming. 
	Significant object-oriented languages include: Ada, ActionScript, C++, Common Lisp, C\#, Dart, Eiffel, Fortran 2003, Haxe, Java, JavaScript, Kotlin, Logo, MATLAB, Objective-C, Object Pascal, Perl, PHP, Python, R, Raku, Ruby, Scala, SIMSCRIPT, Simula, Smalltalk, Swift, Vala and Visual Basic.NET.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = nov,
	year = {2023},
	note = {Page Version ID: 1185356437},
}

@misc{ProgrammingParadigm2023,
	title = {Programming paradigm},
	copyright = {Creative Commons Attribution-ShareAlike License},
	url = {https://en.wikipedia.org/w/index.php?title=Programming_paradigm&oldid=1167849453},
	abstract = {Programming paradigms are a way to classify programming languages based on their features. Languages can be classified into multiple paradigms.
	Some paradigms are concerned mainly with implications for the execution model of the language, such as allowing side effects, or whether the sequence of operations is defined by the execution model.  Other paradigms are concerned mainly with the way that code is organized, such as grouping a code into units along with the state that is modified by the code.  Yet others are concerned mainly with the style of syntax and grammar.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = jul,
	year = {2023},
	note = {Page Version ID: 1167849453},
}

@misc{PhotoVladaKarpovich,
	title = {A Man Cooking at the Kitchen},
	url = {https://www.pexels.com/photo/a-man-cooking-at-the-kitchen-6944110/},
	abstract = {Download this photo by Vlada Karpovich for free on Pexels},
	language = {en},
	urldate = {2023-11-17},
	journal = {Pexels},
	author = {Karpovich, Vlada},
}

@misc{PythonLoops,
	title = {Python {While} {Loops}},
	copyright = {Refsnes Data},
	url = {https://www.w3schools.com/python/python_while_loops.asp},
	abstract = {W3Schools offers free online tutorials, references and exercises in all the major languages of the web. Covering popular subjects like HTML, CSS, JavaScript, Python, SQL, Java, and many, many more.},
	language = {en-US},
	urldate = {2023-11-17},
	month = feb,
	year = {2021},
}

@misc{PRAWDocumentationa,
	title = {{PRAW} 7.7.1 documentation},
	copyright = {Bryce Boe},
	url = {https://praw.readthedocs.io/en/stable/},
	language = {en},
	urldate = {2023-11-17},
	author = {Boe, Bryce},
}

@misc{WorkingPRAWModels,
	title = {Working with {PRAW}’s {Models} - {PRAW} 7.7.2.dev0 documentation},
	copyright = {Bryce Boe},
	url = {https://praw.readthedocs.io/en/latest/code_overview/praw_models.html},
	language = {en},
	urldate = {2023-11-17},
	author = {Boe, Bryce},
}


# Citations for: ch03_bots/04_bots_and_responsibility.md
@incollection{eickelmanKingsPeopleInformation2001,
	address = {New York},
	title = {Kings and {People}: {Information} and {Authority} in {Oman}, {Qatar}, and the {Persian} {Gulf}},
	isbn = {978-1-349-63443-9},
	shorttitle = {Kings and {People}},
	url = {https://doi.org/10.1007/978-1-349-63443-9_12},
	abstract = {For the Arabian Peninsula, the substantial growth in mass education over the last three decades, the proliferation and accessibility of new media and communications, and the increasing ease of travel make it increasingly difficult for state and religious authorities to monopolize the tools of literary culture. The ideas, images, and practices of alternative social and political worlds have become a daily occurrence. They enter domestic space through satellite and cable television, and are better understood than in the past. Rapidly rising levels of literacy and familiarity with an educated Arabic formerly restricted to an elite facilitate this better comprehension. They also rehearse viewers to respond to those in authority in the common language of the Arabic of the classroom and the media.},
	language = {en},
	urldate = {2023-11-17},
	booktitle = {Iran, {Iraq}, and the {Arab} {Gulf} {States}},
	publisher = {Palgrave Macmillan US},
	author = {Eickelman, Dale F.},
	editor = {Kechichian, Joseph A.},
	year = {2001},
	doi = {10.1007/978-1-349-63443-9_12},
	keywords = {Arabian Peninsula, Civil Society, Political Authority, Public Sphere, Saudi Arabia},
	pages = {193--209},
}

@article{katzAssessingPoliticalStability2004,
	title = {Assessing the {Political} {Stability} of {Oman}},
	url = {https://mars.gmu.edu/handle/1920/3031},
	abstract = {Oman is facing important economic and political challenges. The economic challenge it faces is that its population is rising while its oil reserves are declining. The political challenges it faces are the extreme concentration of authority in the hands of one man (Sultan Qaboos), the sultan's unwillingness to allow meaningful political participation or dialogue, political legitimacy issues concerning both Sultan Qaboos and the succession process he has set up, and sporadic but persistent signs of opposition. This article examines these problems and assesses their implications for the political stability of Oman.},
	language = {en},
	urldate = {2023-11-17},
	author = {Katz, Mark N.},
	year = {2004},
	journal = {},
	note = {Accepted: 2008-05-15T21:07:25Z},
}

@article{whitakerOmanSultanQaboos2011,
	chapter = {Opinion},
	title = {Oman's {Sultan} {Qaboos}: a classy despot},
	issn = {0261-3077},
	shorttitle = {Oman's {Sultan} {Qaboos}},
	url = {https://www.theguardian.com/commentisfree/2011/mar/04/oman-sultan-qaboos-despot},
	abstract = {Brian Whitaker: He may be a Britain-friendly, music-loving 'renaissance man', but Oman's Sultan Qaboos still tolerates no dissent},
	language = {en-GB},
	urldate = {2023-11-17},
	journal = {The Guardian},
	author = {Whitaker, Brian},
	month = mar,
	year = {2011},
	keywords = {Arab and Middle East unrest, Middle East and north Africa, Oman, Protest, World news},
}


# Citations for: ch03_bots/05_bot_activity.md
@misc{BotwatchInterestStudy,
	title = {Botwatch: for the interest and study of reddit bots},
	url = {https://www.reddit.com/r/botwatch/},
	urldate = {2023-11-17},
	organization = {Reddit, Inc.},
}

@misc{WikipediaBotsStatus2022,
	title = {Wikipedia:{Bots}/{Status}},
	copyright = {Creative Commons Attribution-ShareAlike License},
	shorttitle = {Wikipedia},
	url = {https://en.wikipedia.org/w/index.php?title=Wikipedia:Bots/Status&oldid=1087413133},
	abstract = {This is intended to be a list of all accounts that identify themselves as bot accounts.},
	language = {en},
	urldate = {2023-11-17},
	journal = {Wikipedia},
	month = may,
	year = {2022},
	note = {Page Version ID: 1087413133},
}
